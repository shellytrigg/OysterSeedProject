install.packages("MetStaT")
library(MetStaT)
?ASCA.Calculate
data(ASCAdata)
ASCA <- ASCA.Calculate(ASCAX, ASCAF, equation.elements = "1,2,12", scaling = FALSE)
View(ASCAX)
View(ASCAF)
ASCA.Plot(ASCA)
ASCA <- ASCA.Calculate(ASCAX, ASCAF, equation.elements = "1", scaling = FALSE)
ASCA.Plot(ASCA)
ASCA.Plot(ASCA)
ASCA.Plot(ASCA)
ASCA.PlotScores(ASCA)
ASCA.PlotLoadings(ASCA)
ASCA.GetPlotLoadings(ASCA)
ASCA.GetSummary(ASCA)
ASCA.PlotScoresPerLevel(ASCA, ee = "2", pcs = "1,2")
ASCA.PlotScoresPerLevel(ASCA, ee = "1", pcs = "1")
ASCA <- ASCA.Calculate(ASCAX, ASCAF, equation.elements = "1,2,12", scaling = FALSE)
ASCA.PlotScoresPerLevel(ASCA, ee = "2", pcs = "1,2")
read.csv("~/Documents/GitHub/OysterSeedProject/analysis/kmeans/Silo3_and_9/silo3and9.csv/")
read.csv("~/Documents/GitHub/OysterSeedProject/analysis/kmeans/Silo3_and_9/silo3and9.csv")
data <- read.csv("~/Documents/GitHub/OysterSeedProject/analysis/kmeans/Silo3_and_9/silo3and9.csv")
View(dat)
View(data)
data$silo <- substr(data$Protein,1,1)
data$Protein <- substr(data$Protein, 3, nchar(data$Protein))
data$Protein <- substr(data$Protein, 3, nchar(data[,1]))
nchar(data$Protein[1])
class(data$Protein)
class(data$Protein) <- "character"
data$Protein <- substr(data$Protein, 3, nchar(data$Protein))
data <- read.csv("~/Documents/GitHub/OysterSeedProject/analysis/kmeans/Silo3_and_9/silo3and9.csv")
data$silo <- substr(data$Protein,1,1)
class(data$Protein) <- "character"
nchar(data$Protein)[1]
View(nchar(data$Protein))
View(data.framenchar(data$Protein)))
View(data.frame(nchar(data$Protein)))
data <- read.csv("~/Documents/GitHub/OysterSeedProject/analysis/kmeans/Silo3_and_9/silo3and9.csv")
data$silo <- substr(data$Protein,1,1)
View(as.character(unlist(data$Protein))
View(as.character(unlist(data$Protein)))
View(data.frame(as.character(unlist(data$Protein))))
data$Protein <- data.frame(as.character(unlist(data$Protein)))
View(data)
data$Protein <- as.character(unlist(data$Protein))
View(data)
data$Protein <- substr(data$Protein, 3, nchar(data$Protein))
View(data)
library(dplyr)
library(tidyr)
View(tidyr::gather(data, key = "silo", value = "Protein"))
View(tidyr::gather(data, key = "Protein", value = "silo"))
View(tidyr::gather(data, key = "Protein", value = "silo", c(1,10)))
View(tidyr::gather(data, key = "silo", value = "Protein", c(1,10)))
View(tidyr::gather(data, key = "silo", value = "Protein", -1)
View(tidyr::gather(data, key = "silo", value = "Protein", -1))
View(tidyr::gather(data, key = "silo", value = "Protein", c(-1)))
View(tidyr::gather(data, key = "silo", value = "Protein", c(10)))
data3 <- data[which(data$silo ==3),]
data9 <- data[which(data$silo ==9),]
View(data9)
View(data3)
View(merge(data3,data9, by= "Protein", all.y = TRUE ))
data <- read.csv("~/Documents/GitHub/OysterSeedProject/analysis/kmeans/Silo3_and_9/silo3and9.csv")
data$Protein <- as.character(unlist(data$Protein))
data$Protein <- substr(data$Protein, 3, nchar(data$Protein))
data3 <- data[which(data$silo ==3),]
data9 <- data[which(data$silo ==9),]
merge(data3,data9, by= "Protein", all.y = TRUE )
data_mrg <-merge(data3,data9, by= "Protein", all.y = TRUE )
View(data_mrg)
data <- read.csv("~/Documents/GitHub/OysterSeedProject/analysis/kmeans/Silo3_and_9/silo3and9.csv")
data$silo <- substr(data$Protein,1,1)
data$Protein <- as.character(unlist(data$Protein))
data$Protein <- substr(data$Protein, 3, nchar(data$Protein))
data3 <- data[which(data$silo ==3),]
data9 <- data[which(data$silo ==9),]
merge(data3,data9, by= "Protein", all.y = TRUE )
data_mrg <- merge(data3,data9, by= "Protein", all.y = TRUE )
data <- read.csv("~/Documents/GitHub/OysterSeedProject/analysis/kmeans/Silo3_and_9/silo3and9.csv")
View(data)
data <- read.csv("~/Documents/GitHub/OysterSeedProject/analysis/kmeans/Silo3_and_9/silo3and9.csv")
data$silo <- substr(data$Protein,1,1)
data$Protein <- as.character(unlist(data$Protein))
data$Protein <- substr(data$Protein, 3, nchar(data$Protein))
View(tidyr::spread(data, abundance, time, c(2:9)))
View(tidyr::gather(data, "Protein",time, c(2:9)))
View(tidyr::gather(data, "Protein",time, c(1:9)))
View(tidyr::gather(data, "Protein","time", c(1:9)))
View(tidyr::gather(data, "time", "Protein", c(1:9)))
View(tidyr::gather(data, "time", "Protein", c(1:9)))
View(tidyr::gather(data, "Protein", "time", c(1:9)))
View(tidyr::gather(data, "Protein", "time", c(2:9)))
View(tidyr::gather(data, "Protein", "abundance", c(2:9)))
View(tidyr::gather(data, "Time", "abundance", c(2:9)))
View(tidyr::spread(data, "Protein", "abundance"))
data <- tidyr::gather(data, "Time", "abundance", c(2:9))
View(tidyr::spread(data, "Protein", "abundance"))
data <- tidyr::spread(data, "Protein", "abundance")
ncol(data)-2
unique(colnames(data))
View(data.frame(unique(colnames(data))))
data <- read.csv("~/Documents/GitHub/OysterSeedProject/analysis/kmeans/Silo3_and_9/silo3and9.csv")
data$Protein <- as.character(unlist(data$Protein))
data$Protein <- substr(data$Protein, 3, nchar(data$Protein))
View(data.frame(unique(data$Protein))
View(data.frame(unique(data$Protein)))
data <- read.csv("~/Documents/GitHub/OysterSeedProject/analysis/kmeans/Silo3_and_9/silo3and9.csv")
data$silo <- substr(data$Protein,1,1)
data$Protein <- as.character(unlist(data$Protein))
data$Protein <- substr(data$Protein, 3, nchar(data$Protein))
data <- tidyr::gather(data, "Time", "abundance", c(2:9))
data <- tidyr::spread(data, "Protein", "abundance")
View(data)
ASCA_X <- data[,-c(1:2)]
ASCA_F <- data[,1:2]
View(ASCA_X)
View(ASCA_F)
class(ASCA_F$silo)
class(ASCA_F$Time)
ASCA_F$silo <- as.numeric(ASCA_F$silo)
ASCA_F$Time <- as.numeric(substr(ASCA_F$Time,2,nchar(ASCA_F$Time))
ASCA_F$Time <- as.numeric(substr(ASCA_F$Time,2,nchar(ASCA_F$Time)))
class(ASCA_X$ALBU_BOVINA)
class(ASCA_X$ALBU_BOVIN)
View(ASCAF)
ASCA <- ASCA.Calculate(ASCA_X, ASCA_F, equation.elements = "1,2,12", scaling = FALSE)
ASCA_X <- as.matrix(data[,-c(1:2)])
ASCA_F <- as.matrix(data[,1:2])
ASCA_F$silo <- as.numeric(ASCA_F$silo)
ASCA_F$Time <- as.numeric(substr(ASCA_F$Time,2,nchar(ASCA_F$Time)))
View(ASCA_X)
class(ASCA_X$ALBU_BOVIN)
class(ASCA_X[,1])
class(ASCA_F[,1])
ASCA_F[,1] <- as.numeric(ASCA_F[,1])
class(ASCA_F[,1])
ASCA_F[,1] <- as.numeric(unlist(ASCA_F[,1]))
class(ASCA_F[,1])
class(ASCA_F[,1]) <- "numeric"
class(ASCA_F[,1])
ASCA_F <- data[,1:2]
ASCA_F$silo <- as.numeric(ASCA_F$silo)
ASCA_F$Time <- as.numeric(substr(ASCA_F$Time,2,nchar(ASCA_F$Time)))
ASCA_F<- as.matrix(ASCA_F)
class(ASCA_F[,1])
class(ASCA_F[,2])
ASCA <- ASCA.Calculate(ASCA_X, ASCA_F, equation.elements = "1,2,12", scaling = FALSE)
ASCA <- ASCA.Calculate(ASCA_X, ASCA_F, equation.elements = "1,2,12", scaling = FALSE, na.rm = TRUE)
View(ASCA_X[complete.cases(ASCA_X),])
View(na.omit(ASCA_X))
data <- read.csv("~/Documents/GitHub/OysterSeedProject/analysis/kmeans/Silo3_and_9/silo3and9.csv")
#create silo column
data$silo <- substr(data$Protein,1,1)
#change class of protein column from factor to character
data$Protein <- as.character(unlist(data$Protein))
#remove the silo identifier from the protein names
data$Protein <- substr(data$Protein, 3, nchar(data$Protein))
View(data)
data <- tidyr::gather(data, "Time", "abundance", c(2:9))
data <- tidyr::spread(data, "Protein", "abundance")
library("MetStaT", lib.loc="~/Library/R/3.4/library")
## use the data matrix, 'ASCAX', and an experimental design matrix, 'ASCAF'
data(ASCAdata)
ASCA <- ASCA.Calculate(ASCAX, ASCAF, equation.elements = "1,2,12", scaling = FALSE)
## plot the results
ASCA.Plot(ASCA)
ASCA.PlotScoresPerLevel(ASCA)
ASCA
ASCA.Plot(ASCA)
ASCA.PlotLoadings(ASCA)
ASCA.PlotScores(ASCA)
View(ASCAF)
ASCA.PlotScoresPerLevel(ASCA)
ASCA <- ASCA.Calculate(ASCAX, ASCAF, equation.elements = "1,2,12", scaling = FALSE)
ASCA.PlotScoresPerLevel(ASCA)
ASCA.GetSummary(ASCA)
ASCA.PlotScoresPerLevel(ASCA, ee = "2", pcs = "1,2")
ASCA.PlotScoresPerLevel(ASCA, ee = "1", pcs = "1,2")
ASCA.PlotLoadings(ASCA, ee = "1", pcs="1,2")
ASCA.PlotScores(asca, ee = "1", PCs = "1,2")
ASCA.PlotScores(ASCA, ee = "1", PCs = "1,2")
ASCA.PlotScores(ASCA, ee = "2", PCs = "1,2")
View(ASCA)
View(data.frame(ASCA))
View(data.frame(ASCA[1]))
View(data.frame(ASCA[2]))
ASCA
ASCA.PlotScoresPerLevel(ASCA, ee = "1", pcs = "1,2")
View(ASCAF)
View(rbind(ASCAF,ASCAX))
View(cbind(ASCAF,ASCAX))
ASCA.PlotScoresPerLevel(ASCA, ee = "1,2", pcs = "1,2")
ASCA.PlotScoresPerLevel(ASCA, ee = "12", pcs = "1,2")
ASCA.DoPermutationTest(ASCA, perm=1000)
ASCA.PlotScoresPerLevel(ASCA, ee = "1", pcs = "1,2")
View(data)
data$silo <- as.numeric(data$silo)
#change time column class to numeric; exclude the X with the substr command
data$Time <- as.numeric(substr(data$Time,2,nchar(data$Time)))
write.csv(data, "~/Documents/GitHub/OysterSeedProject/analysis/ASCA/ASCA_shellytest/silo3_9_reformat4MetabA.csv", row.names = FALSE, quote = FALSE)
data$sample <- paste("S",data$silo,"T",data$Time, sep = "")
View(data)
data <- data[,c(ncol(data),1:ncol(data)-1)]
View(data)
ncol(data)
write.csv(data, "~/Documents/GitHub/OysterSeedProject/analysis/ASCA/ASCA_shellytest/silo3_9_reformat4MetabA.csv", row.names = FALSE, quote = FALSE)
max(data[,3:ncol(data)])
max(data[,3:ncol(data)], na.rm = TRUE)
min(data[,3:ncol(data)], na.rm = TRUE)
min(data[which(data[,3:ncol(data)!=0]),3:ncol(data)], na.rm = TRUE)
min(data[which(data[,3:ncol(data)!=0]),], na.rm = TRUE)
min(data[which(data[,3:ncol(data)] !=0),3:ncol(data)], na.rm = TRUE)
min(data[which(data[,3:ncol(data)] !=0),], na.rm = TRUE)
min(data[,which(data[,3:ncol(data)] < 0)], na.rm = TRUE)
View(data[,which(data[,3:ncol(data)] < 0)])
View(data[which(data[,3:ncol(data)] < 0),])
View(data[,which(data[,3:ncol(data)] < 0)])
View(as.list(data[,3:ncol(data)]))
View(as.list(data[,4:ncol(data)]))
View(as.list(data[,4:ncol(data)] > 0))
min(as.list(data[,4:ncol(data)] > 0))
min(as.vector(data[,4:ncol(data)] > 0))
min(as.vector(data[,4:ncol(data)] > 0), na.rm = TRUE)
min(as.vector(data[,4:ncol(data)]) > 0, na.rm = TRUE)
View(as.vector(data[,4:ncol(data)]) > 0)
min(data[data > 0)], na.rm = TRUE)
min(data[data > 0], na.rm = TRUE)
min(data[data[,4:ncol(data)] > 0], na.rm = TRUE)
min(data[data > 0], na.rm = TRUE)
data[is.na(data)] <- 0.1
ASCA_X <- as.matrix(data[,-c(1:3)])
#create matrix to pass to ASCA command with only the silo and time info
ASCA_F <- as.matrix(data[,2:3])
ASCA <- ASCA.Calculate(ASCA_X, ASCA_F, equation.elements = "1,2,12", scaling = FALSE)
library(MetStaT)
ASCA <- ASCA.Calculate(ASCA_X, ASCA_F, equation.elements = "1,2,12", scaling = FALSE)
ASCA.PlotScoresPerLevel(ASCA, ee = "1", pcs = "1,2")
ASCA.PlotScoresPerLevel(ASCA, ee = "12", pcs = "1,2")
ASCA.PlotScoresPerLevel(ASCA, ee = "2", pcs = "1,2")
ASCA
data <- read.csv("~/Documents/GitHub/OysterSeedProject/analysis/kmeans/Silo3_and_9/silo3and9.csv")
View(data)
data$silo <- substr(data$Protein,1,1)
data$Protein <- as.character(unlist(data$Protein))
data$Protein <- substr(data$Protein, 3, nchar(data$Protein))
View(data)
data <- tidyr::gather(data, "Time", "abundance", c(2:9))
data <- read.csv("~/Documents/GitHub/OysterSeedProject/analysis/kmeans/Silo3_and_9/silo3and9.csv")
#create silo column
data$silo <- substr(data$Protein,1,1)
#change class of protein column from factor to character
data$Protein <- as.character(unlist(data$Protein))
#remove the silo identifier from the protein names
data$Protein <- substr(data$Protein, 3, nchar(data$Protein))
View(data.frame(is.na(data)))
(is.na(data))
View(data[which(is.na(data)),]
View(data[which(is.na(data)),])
data <- tidyr::gather(data, "Time", "abundance", c(2:9))
View(data[which(is.na(data)),])
data <- tidyr::spread(data, "Protein", "abundance")
View(data[which(is.na(data)),])
#read in Oyster Temp. protein data frame
data <- read.csv("~/Documents/GitHub/OysterSeedProject/analysis/kmeans/Silo3_and_9/silo3and9.csv")
#create silo column
data$silo <- substr(data$Protein,1,1)
#change class of protein column from factor to character
data$Protein <- as.character(unlist(data$Protein))
#remove the silo identifier from the protein names
data$Protein <- substr(data$Protein, 3, nchar(data$Protein))
#Change table orientation so that all abundances are listed in one column
#and time points are listed down a column
#In this command, we only want to apply it to the timepoint columns that
#have abundance values and keep the protein and silo columns unchanged
#so we use c(2:9) to select for timepoint columns with abundance values only
data <- tidyr::gather(data, "Time", "abundance", c(2:9))
#Change the table orientation again so that proteins are listed across the top
#This command will condense the proteins so that only unique proteins are listed
#across the top
data <- tidyr::spread(data, "Protein", "abundance")
#change silo column class to numeric
data$silo <- as.numeric(data$silo)
#change time column class to numeric; exclude the X with the substr command
data$Time <- as.numeric(substr(data$Time,2,nchar(data$Time)))
#format and export table for metaboanalyst
data$sample <- paste("S",data$silo,"T",data$Time, sep = "")
#move sample columns to first column
data <- data[,c(ncol(data),1:ncol(data)-1)]
#replace NAs with non-zero value so we can run ASCA
data[is.na(data)] <- 0.1
write.csv(data, "~/Documents/GitHub/OysterSeedProject/analysis/ASCA/ASCA_shellytest/silo3_9_reformat4MetabA.csv", row.names = FALSE, quote = FALSE)
ASCA
asca
data(ASCAdata)
ASCA <- ASCA.Calculate(ASCAX, ASCAF, equation.elements = "1,2,12", scaling = FALSE)
library(dplyr)
library(tidyr)
library(MetStaT)
#Messing around with ASCA example:
## use the data matrix, 'ASCAX', and an experimental design matrix, 'ASCAF'
data(ASCAdata)
ASCA <- ASCA.Calculate(ASCAX, ASCAF, equation.elements = "1,2,12", scaling = FALSE)
ASCA
ASCA$svd
ASCA$
View(ASCAF)
ASCA[[1]]$svd
ASCA[[V1]]$svd
ASCA[1]$svd
ASCA$svd
ASCA.PlotLoadings(ASCA, ee ="1")
ASCA[[1]]
View(ASCA$svd$v)
View(ASCA$svd$var.explained)
ASCA.GetSummary(asca)
ASCA.GetSummary(ASCA)
View(ASCA$svd$d)
View(ASCA$1)
View(ASCA$`12`)
View(ASCA$`1`$svd$v)
ASCA$`1`$svd
wtf <- ASCA$`1`$svd
wtf$v
plot(1:dim(wtf$v)[1],wtf$v[,pc1],type="h")
pc1
min(c(wtf$v[,1], wtf$v[,2]))
max(c(wtf$v[,1], wtf$v[,2]))
ASCA$`1`$svd$v[,1]
View(ASCA$`1`$svd$v[,1])
View(data.frame(ASCA$`1`$svd$v[,1]))
wtf <- data.frame(ASCA$`1`$svd$v[,1])
colnames(wtf)[1] <- "PC1_loadings"
View(wtf)
View(data)
ASCA <- ASCA.Calculate(ASCA_X, ASCA_F, equation.elements = "1,2,12", scaling = FALSE)
library(MetStaT)
ASCA <- ASCA.Calculate(ASCA_X, ASCA_F, equation.elements = "1,2,12", scaling = FALSE)
View(ASCA$`1`$svd$v)
View(ASCA$data[2])
View(ASCA$data)
d1 <- data.frame(colnames(ASCA$data))
View(d1)
View(ASCA$remainder)
View(ASCA$`1`$reduced.matrix)
d1 <- data.frame(colnames(ASCA$data))
d2 <- data.frame(colnames(ASCA$remainder))
d3 <- data.frame(colnames(ASCA$`1`$reduced.matrix))
d4 <- data.frame(colnames(ASCA$`2`$reduced.matrix))
d5 <- data.frame(colnames(ASCA$`12`$reduced.matrix))
test <- cbind(d1,d2,d3,d4,d5)
View(test)
View(ASCA$`1`$svd$var.explained)
View(data.frame(ASCA$`1`$svd$var.explained))
Temp_loadings <- cbind(d1,ASCA$`1`$svd$v[,1])
View(Temp_loadings)
write.csv(Temp_loadings, "~/Documents/GitHub/OysterSeedProject/analysis/ASCA/ASCA_shellytest/ACSAr_temp_loadings.csv", row.names = FALSE, quote = FALSE)
Temp_loadings_cut <- Temp_loadings[which(Temp_loadings$`ASCA$`1`$svd$v[, 1]` >= 0.05 | Temp_loadings$`ASCA$`1`$svd$v[, 1]` <= -0.05),]
colnames(Temp_loadings) <- c("protein", "PC1_loadings")
write.csv(Temp_loadings, "~/Documents/GitHub/OysterSeedProject/analysis/ASCA/ASCA_shellytest/ACSAr_temp_loadings.csv", row.names = FALSE, quote = FALSE)
Temp_loadings_cut <- Temp_loadings[which(Temp_loadings$PC1_loadings >= 0.05 | Temp_loadings$PC1_loadings <= -0.05),]
View(Temp_loadings_cut)
View(data)
library(dplyr)
Temp_loadings_cut <- data.frame(Temp_loadings[which(Temp_loadings$PC1_loadings >= 0.05 | Temp_loadings$PC1_loadings <= -0.05),])
data_PC1_0.05_selects <- data[which(colnames(data) %in% Temp_loadings_cut$protein),]
View(data_PC1_0.05_selects)
data_PC1_0.05_selects <- data[,which(colnames(data) %in% Temp_loadings_cut$protein)]
View(data_PC1_0.05_selects)
View(data)
data_PC1_0.05_selects <- data[,c(1:3,which(colnames(data) %in% Temp_loadings_cut$protein))]
View(data_PC1_0.05_selects)
ncol(data_PC1_0.05_selects)
ncol(Temp_loadings_cut)
nrow(Temp_loadings_cut)
View(Temp_loadings_cut)
write.csv(data_PC1_0.05_selects, "~/Documents/GitHub/OysterSeedProject/analysis/ASCA/ASCA_shellytest/data_PC1_0.05_selects.csv", row.names = FALSE, quote = FALSE)
colnames(test)< c("d1","d2", "d3","d4","d5")
View(test)
colnames(test)< c("d1","d2", "d3","d4","d5")
colnames(test) <- c("d1","d2", "d3","d4","d5")
View(test)
identical(test$d1,test$d2, test$d3, test$d4, test$d5)
?identical()
identical(test$d1,test$d2)
?all()
all(test$d1==test$d2==test$d3==test$d4==test$d5)
all(test$d1 == test$d2 == test$d3 == test$d4 == test$d5)
all(test$d1 == test$d2)
identical(test$d1,test$d3)
identical(test$d1,test$d4)
identical(test$d1,test$d5)
identical(test$d2,test$d3)
identical(test$d2,test$d4)
identical(test$d2,test$d5)
identical(test$d3,test$d4)
identical(test$d3,test$d5)
identical(test$d4,test$d5)
ncol(data_PC1_0.05_selects[,4:ncol(data_PC1_0.05_selects)])
