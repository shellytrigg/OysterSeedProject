## use the data matrix, 'ASCAX', and an experimental design matrix, 'ASCAF'
data(ASCAdata)
ASCA <- ASCA.Calculate(ASCAX, ASCAF, equation.elements = "1,2,12", scaling = FALSE)
## plot the results
ASCA.Plot(ASCA)
ASCA.PlotScoresPerLevel(ASCA)
ASCA
ASCA.Plot(ASCA)
ASCA.PlotLoadings(ASCA)
ASCA.PlotScores(ASCA)
View(ASCAF)
ASCA.PlotScoresPerLevel(ASCA)
ASCA <- ASCA.Calculate(ASCAX, ASCAF, equation.elements = "1,2,12", scaling = FALSE)
ASCA.PlotScoresPerLevel(ASCA)
ASCA.GetSummary(ASCA)
ASCA.PlotScoresPerLevel(ASCA, ee = "2", pcs = "1,2")
ASCA.PlotScoresPerLevel(ASCA, ee = "1", pcs = "1,2")
ASCA.PlotLoadings(ASCA, ee = "1", pcs="1,2")
ASCA.PlotScores(asca, ee = "1", PCs = "1,2")
ASCA.PlotScores(ASCA, ee = "1", PCs = "1,2")
ASCA.PlotScores(ASCA, ee = "2", PCs = "1,2")
View(ASCA)
View(data.frame(ASCA))
View(data.frame(ASCA[1]))
View(data.frame(ASCA[2]))
ASCA
ASCA.PlotScoresPerLevel(ASCA, ee = "1", pcs = "1,2")
View(ASCAF)
View(rbind(ASCAF,ASCAX))
View(cbind(ASCAF,ASCAX))
ASCA.PlotScoresPerLevel(ASCA, ee = "1,2", pcs = "1,2")
ASCA.PlotScoresPerLevel(ASCA, ee = "12", pcs = "1,2")
ASCA.DoPermutationTest(ASCA, perm=1000)
ASCA.PlotScoresPerLevel(ASCA, ee = "1", pcs = "1,2")
View(data)
data$silo <- as.numeric(data$silo)
#change time column class to numeric; exclude the X with the substr command
data$Time <- as.numeric(substr(data$Time,2,nchar(data$Time)))
write.csv(data, "~/Documents/GitHub/OysterSeedProject/analysis/ASCA/ASCA_shellytest/silo3_9_reformat4MetabA.csv", row.names = FALSE, quote = FALSE)
data$sample <- paste("S",data$silo,"T",data$Time, sep = "")
View(data)
data <- data[,c(ncol(data),1:ncol(data)-1)]
View(data)
ncol(data)
write.csv(data, "~/Documents/GitHub/OysterSeedProject/analysis/ASCA/ASCA_shellytest/silo3_9_reformat4MetabA.csv", row.names = FALSE, quote = FALSE)
max(data[,3:ncol(data)])
max(data[,3:ncol(data)], na.rm = TRUE)
min(data[,3:ncol(data)], na.rm = TRUE)
min(data[which(data[,3:ncol(data)!=0]),3:ncol(data)], na.rm = TRUE)
min(data[which(data[,3:ncol(data)!=0]),], na.rm = TRUE)
min(data[which(data[,3:ncol(data)] !=0),3:ncol(data)], na.rm = TRUE)
min(data[which(data[,3:ncol(data)] !=0),], na.rm = TRUE)
min(data[,which(data[,3:ncol(data)] < 0)], na.rm = TRUE)
View(data[,which(data[,3:ncol(data)] < 0)])
View(data[which(data[,3:ncol(data)] < 0),])
View(data[,which(data[,3:ncol(data)] < 0)])
View(as.list(data[,3:ncol(data)]))
View(as.list(data[,4:ncol(data)]))
View(as.list(data[,4:ncol(data)] > 0))
min(as.list(data[,4:ncol(data)] > 0))
min(as.vector(data[,4:ncol(data)] > 0))
min(as.vector(data[,4:ncol(data)] > 0), na.rm = TRUE)
min(as.vector(data[,4:ncol(data)]) > 0, na.rm = TRUE)
View(as.vector(data[,4:ncol(data)]) > 0)
min(data[data > 0)], na.rm = TRUE)
min(data[data > 0], na.rm = TRUE)
min(data[data[,4:ncol(data)] > 0], na.rm = TRUE)
min(data[data > 0], na.rm = TRUE)
data[is.na(data)] <- 0.1
ASCA_X <- as.matrix(data[,-c(1:3)])
#create matrix to pass to ASCA command with only the silo and time info
ASCA_F <- as.matrix(data[,2:3])
ASCA <- ASCA.Calculate(ASCA_X, ASCA_F, equation.elements = "1,2,12", scaling = FALSE)
library(MetStaT)
ASCA <- ASCA.Calculate(ASCA_X, ASCA_F, equation.elements = "1,2,12", scaling = FALSE)
ASCA.PlotScoresPerLevel(ASCA, ee = "1", pcs = "1,2")
ASCA.PlotScoresPerLevel(ASCA, ee = "12", pcs = "1,2")
ASCA.PlotScoresPerLevel(ASCA, ee = "2", pcs = "1,2")
ASCA
data <- read.csv("~/Documents/GitHub/OysterSeedProject/analysis/kmeans/Silo3_and_9/silo3and9.csv")
View(data)
data$silo <- substr(data$Protein,1,1)
data$Protein <- as.character(unlist(data$Protein))
data$Protein <- substr(data$Protein, 3, nchar(data$Protein))
View(data)
data <- tidyr::gather(data, "Time", "abundance", c(2:9))
data <- read.csv("~/Documents/GitHub/OysterSeedProject/analysis/kmeans/Silo3_and_9/silo3and9.csv")
#create silo column
data$silo <- substr(data$Protein,1,1)
#change class of protein column from factor to character
data$Protein <- as.character(unlist(data$Protein))
#remove the silo identifier from the protein names
data$Protein <- substr(data$Protein, 3, nchar(data$Protein))
View(data.frame(is.na(data)))
(is.na(data))
View(data[which(is.na(data)),]
View(data[which(is.na(data)),])
data <- tidyr::gather(data, "Time", "abundance", c(2:9))
View(data[which(is.na(data)),])
data <- tidyr::spread(data, "Protein", "abundance")
View(data[which(is.na(data)),])
#read in Oyster Temp. protein data frame
data <- read.csv("~/Documents/GitHub/OysterSeedProject/analysis/kmeans/Silo3_and_9/silo3and9.csv")
#create silo column
data$silo <- substr(data$Protein,1,1)
#change class of protein column from factor to character
data$Protein <- as.character(unlist(data$Protein))
#remove the silo identifier from the protein names
data$Protein <- substr(data$Protein, 3, nchar(data$Protein))
#Change table orientation so that all abundances are listed in one column
#and time points are listed down a column
#In this command, we only want to apply it to the timepoint columns that
#have abundance values and keep the protein and silo columns unchanged
#so we use c(2:9) to select for timepoint columns with abundance values only
data <- tidyr::gather(data, "Time", "abundance", c(2:9))
#Change the table orientation again so that proteins are listed across the top
#This command will condense the proteins so that only unique proteins are listed
#across the top
data <- tidyr::spread(data, "Protein", "abundance")
#change silo column class to numeric
data$silo <- as.numeric(data$silo)
#change time column class to numeric; exclude the X with the substr command
data$Time <- as.numeric(substr(data$Time,2,nchar(data$Time)))
#format and export table for metaboanalyst
data$sample <- paste("S",data$silo,"T",data$Time, sep = "")
#move sample columns to first column
data <- data[,c(ncol(data),1:ncol(data)-1)]
#replace NAs with non-zero value so we can run ASCA
data[is.na(data)] <- 0.1
write.csv(data, "~/Documents/GitHub/OysterSeedProject/analysis/ASCA/ASCA_shellytest/silo3_9_reformat4MetabA.csv", row.names = FALSE, quote = FALSE)
ASCA
asca
data(ASCAdata)
ASCA <- ASCA.Calculate(ASCAX, ASCAF, equation.elements = "1,2,12", scaling = FALSE)
library(dplyr)
library(tidyr)
library(MetStaT)
#Messing around with ASCA example:
## use the data matrix, 'ASCAX', and an experimental design matrix, 'ASCAF'
data(ASCAdata)
ASCA <- ASCA.Calculate(ASCAX, ASCAF, equation.elements = "1,2,12", scaling = FALSE)
ASCA
ASCA$svd
ASCA$
View(ASCAF)
ASCA[[1]]$svd
ASCA[[V1]]$svd
ASCA[1]$svd
ASCA$svd
ASCA.PlotLoadings(ASCA, ee ="1")
ASCA[[1]]
View(ASCA$svd$v)
View(ASCA$svd$var.explained)
ASCA.GetSummary(asca)
ASCA.GetSummary(ASCA)
View(ASCA$svd$d)
View(ASCA$1)
View(ASCA$`12`)
View(ASCA$`1`$svd$v)
ASCA$`1`$svd
wtf <- ASCA$`1`$svd
wtf$v
plot(1:dim(wtf$v)[1],wtf$v[,pc1],type="h")
pc1
min(c(wtf$v[,1], wtf$v[,2]))
max(c(wtf$v[,1], wtf$v[,2]))
ASCA$`1`$svd$v[,1]
View(ASCA$`1`$svd$v[,1])
View(data.frame(ASCA$`1`$svd$v[,1]))
wtf <- data.frame(ASCA$`1`$svd$v[,1])
colnames(wtf)[1] <- "PC1_loadings"
View(wtf)
View(data)
ASCA <- ASCA.Calculate(ASCA_X, ASCA_F, equation.elements = "1,2,12", scaling = FALSE)
library(MetStaT)
ASCA <- ASCA.Calculate(ASCA_X, ASCA_F, equation.elements = "1,2,12", scaling = FALSE)
View(ASCA$`1`$svd$v)
View(ASCA$data[2])
View(ASCA$data)
d1 <- data.frame(colnames(ASCA$data))
View(d1)
View(ASCA$remainder)
View(ASCA$`1`$reduced.matrix)
d1 <- data.frame(colnames(ASCA$data))
d2 <- data.frame(colnames(ASCA$remainder))
d3 <- data.frame(colnames(ASCA$`1`$reduced.matrix))
d4 <- data.frame(colnames(ASCA$`2`$reduced.matrix))
d5 <- data.frame(colnames(ASCA$`12`$reduced.matrix))
test <- cbind(d1,d2,d3,d4,d5)
View(test)
View(ASCA$`1`$svd$var.explained)
View(data.frame(ASCA$`1`$svd$var.explained))
Temp_loadings <- cbind(d1,ASCA$`1`$svd$v[,1])
View(Temp_loadings)
write.csv(Temp_loadings, "~/Documents/GitHub/OysterSeedProject/analysis/ASCA/ASCA_shellytest/ACSAr_temp_loadings.csv", row.names = FALSE, quote = FALSE)
Temp_loadings_cut <- Temp_loadings[which(Temp_loadings$`ASCA$`1`$svd$v[, 1]` >= 0.05 | Temp_loadings$`ASCA$`1`$svd$v[, 1]` <= -0.05),]
colnames(Temp_loadings) <- c("protein", "PC1_loadings")
write.csv(Temp_loadings, "~/Documents/GitHub/OysterSeedProject/analysis/ASCA/ASCA_shellytest/ACSAr_temp_loadings.csv", row.names = FALSE, quote = FALSE)
Temp_loadings_cut <- Temp_loadings[which(Temp_loadings$PC1_loadings >= 0.05 | Temp_loadings$PC1_loadings <= -0.05),]
View(Temp_loadings_cut)
View(data)
library(dplyr)
Temp_loadings_cut <- data.frame(Temp_loadings[which(Temp_loadings$PC1_loadings >= 0.05 | Temp_loadings$PC1_loadings <= -0.05),])
data_PC1_0.05_selects <- data[which(colnames(data) %in% Temp_loadings_cut$protein),]
View(data_PC1_0.05_selects)
data_PC1_0.05_selects <- data[,which(colnames(data) %in% Temp_loadings_cut$protein)]
View(data_PC1_0.05_selects)
View(data)
data_PC1_0.05_selects <- data[,c(1:3,which(colnames(data) %in% Temp_loadings_cut$protein))]
View(data_PC1_0.05_selects)
ncol(data_PC1_0.05_selects)
ncol(Temp_loadings_cut)
nrow(Temp_loadings_cut)
View(Temp_loadings_cut)
write.csv(data_PC1_0.05_selects, "~/Documents/GitHub/OysterSeedProject/analysis/ASCA/ASCA_shellytest/data_PC1_0.05_selects.csv", row.names = FALSE, quote = FALSE)
colnames(test)< c("d1","d2", "d3","d4","d5")
View(test)
colnames(test)< c("d1","d2", "d3","d4","d5")
colnames(test) <- c("d1","d2", "d3","d4","d5")
View(test)
identical(test$d1,test$d2, test$d3, test$d4, test$d5)
?identical()
identical(test$d1,test$d2)
?all()
all(test$d1==test$d2==test$d3==test$d4==test$d5)
all(test$d1 == test$d2 == test$d3 == test$d4 == test$d5)
all(test$d1 == test$d2)
identical(test$d1,test$d3)
identical(test$d1,test$d4)
identical(test$d1,test$d5)
identical(test$d2,test$d3)
identical(test$d2,test$d4)
identical(test$d2,test$d5)
identical(test$d3,test$d4)
identical(test$d3,test$d5)
identical(test$d4,test$d5)
ncol(data_PC1_0.05_selects[,4:ncol(data_PC1_0.05_selects)])
data <- read.csv("~/Documents/GitHub/OysterSeedProject/analysis/kmeans/Silo3_and_9/silo3and9.csv")
data$silo <- substr(data$Protein,1,1)
#change class of protein column from factor to character
data$Protein <- as.character(unlist(data$Protein))
#remove the silo identifier from the protein names
data$Protein <- substr(data$Protein, 3, nchar(data$Protein))
#Change table orientation so that all abundances are listed in one column
#and time points are listed down a column
#In this command, we only want to apply it to the timepoint columns that
#have abundance values and keep the protein and silo columns unchanged
#so we use c(2:9) to select for timepoint columns with abundance values only
data <- tidyr::gather(data, "Time", "abundance", c(2:9))
#Change the table orientation again so that proteins are listed across the top
#This command will condense the proteins so that only unique proteins are listed
#across the top
data <- tidyr::spread(data, "Protein", "abundance")
#change silo column class to numeric
data$silo <- as.numeric(data$silo)
#change time column class to numeric; exclude the X with the substr command
data$Time <- as.numeric(substr(data$Time,2,nchar(data$Time)))
#format and export table for metaboanalyst
data$sample <- paste("S",data$silo,"T",data$Time, sep = "")
#move sample columns to first column
data <- data[,c(ncol(data),1:ncol(data)-1)]
View(data)
data <- data[grep("CHOYP", colnames(data)),]
View(data)
data <- read.csv("~/Documents/GitHub/OysterSeedProject/analysis/kmeans/Silo3_and_9/silo3and9.csv")
#create silo column
data$silo <- substr(data$Protein,1,1)
#change class of protein column from factor to character
data$Protein <- as.character(unlist(data$Protein))
#remove the silo identifier from the protein names
data$Protein <- substr(data$Protein, 3, nchar(data$Protein))
#Change table orientation so that all abundances are listed in one column
#and time points are listed down a column
#In this command, we only want to apply it to the timepoint columns that
#have abundance values and keep the protein and silo columns unchanged
#so we use c(2:9) to select for timepoint columns with abundance values only
data <- tidyr::gather(data, "Time", "abundance", c(2:9))
#Change the table orientation again so that proteins are listed across the top
#This command will condense the proteins so that only unique proteins are listed
#across the top
data <- tidyr::spread(data, "Protein", "abundance")
#change silo column class to numeric
data$silo <- as.numeric(data$silo)
#change time column class to numeric; exclude the X with the substr command
data$Time <- as.numeric(substr(data$Time,2,nchar(data$Time)))
#format and export table for metaboanalyst
data$sample <- paste("S",data$silo,"T",data$Time, sep = "")
#move sample columns to first column
data <- data[,c(ncol(data),1:ncol(data)-1)]
data <- data[,grep("CHOYP", colnames(data))]
View(data)
data <- read.csv("~/Documents/GitHub/OysterSeedProject/analysis/kmeans/Silo3_and_9/silo3and9.csv")
#create silo column
data$silo <- substr(data$Protein,1,1)
#change class of protein column from factor to character
data$Protein <- as.character(unlist(data$Protein))
#remove the silo identifier from the protein names
data$Protein <- substr(data$Protein, 3, nchar(data$Protein))
#Change table orientation so that all abundances are listed in one column
#and time points are listed down a column
#In this command, we only want to apply it to the timepoint columns that
#have abundance values and keep the protein and silo columns unchanged
#so we use c(2:9) to select for timepoint columns with abundance values only
data <- tidyr::gather(data, "Time", "abundance", c(2:9))
#Change the table orientation again so that proteins are listed across the top
#This command will condense the proteins so that only unique proteins are listed
#across the top
data <- tidyr::spread(data, "Protein", "abundance")
#change silo column class to numeric
data$silo <- as.numeric(data$silo)
#change time column class to numeric; exclude the X with the substr command
data$Time <- as.numeric(substr(data$Time,2,nchar(data$Time)))
#format and export table for metaboanalyst
data$sample <- paste("S",data$silo,"T",data$Time, sep = "")
#move sample columns to first column
data <- data[,c(ncol(data),1:ncol(data)-1)]
View(data)
data <- data[,c(1:3,grep("CHOYP", colnames(data)))]
View(data)
write.csv(data, "~/Documents/GitHub/OysterSeedProject/analysis/ASCA/ASCA_shellytest/silo3_9_CHOYP_reformat4MetabA.csv", row.names = FALSE, quote = FALSE)
data_nozero <- data[which(data[4:ncol(data)] > 0 & !(is.na(data[4:ncol(data)]))),]
View(data_nozero)
data_nozero <- data[which(data[4:ncol(data)] != 0 & !(is.na(data[4:ncol(data)]))),]
View(data_nozero)
library(MetaboAnalystR)
mSet<-InitDataObjects("conc", "ts", FALSE)
mSet<-SetDesignType(mSet, "time")
mSet<-Read.TextData(mSet, "~/Documents/GitHub/OysterSeedProject/analysis/ASCA/ASCA_shellytest/silo3_9_CHOYP_reformat4MetabA.csv", "rowts", "disc")
mSet<-SanityCheckData(mSet)
mSet<-RemoveMissingPercent(mSet, percent=0.5)
mSet<-ImputeVar(mSet, method="exclude")
mSet<-Normalization(mSet, "NULL", "NULL", "MeanCenter", ratio=FALSE, ratioNum=20)
mSet<-PlotNormSummary(mSet, "norm_0_", "png", 72, width=NA)
mSet<-PlotNormSummary(mSet, "norm_CHOYP_nozeros_", "png", 72, width=NA)
View(data.frame(mSet$dataSet))
View(data.frame(mSet$dataSet$norm))
View(data.frame(mSet$dataSet$procr))
normData <- data.frame(mSet$dataSet$norm)
ncol(normData)
data_std <- data[,c(1:3,!grep("CHOYP", colnames(data)))]
View(data_std)
data_std <- data[,c(1:3,-grep("CHOYP", colnames(data)))]
data_std <- data[,c(1:3,-grepl("CHOYP", colnames(data)))]
data_std <- data[-grepl("CHOYP", colnames(data),c(1:3))]
View(data_std)
View(-grepl("CHOYP", colnames(data))
data_std <- data[,c(1:3,-grep("CHOYP", colnames(data)))]
data_std <- data[,-grep("CHOYP", colnames(data))]
View(data_std)
#read in Oyster Temp. protein data frame
data <- read.csv("~/Documents/GitHub/OysterSeedProject/analysis/kmeans/Silo3_and_9/silo3and9.csv")
#create silo column
data$silo <- substr(data$Protein,1,1)
#change class of protein column from factor to character
data$Protein <- as.character(unlist(data$Protein))
#remove the silo identifier from the protein names
data$Protein <- substr(data$Protein, 3, nchar(data$Protein))
#Change table orientation so that all abundances are listed in one column
#and time points are listed down a column
#In this command, we only want to apply it to the timepoint columns that
#have abundance values and keep the protein and silo columns unchanged
#so we use c(2:9) to select for timepoint columns with abundance values only
data <- tidyr::gather(data, "Time", "abundance", c(2:9))
#Change the table orientation again so that proteins are listed across the top
#This command will condense the proteins so that only unique proteins are listed
#across the top
data <- tidyr::spread(data, "Protein", "abundance")
#change silo column class to numeric
data$silo <- as.numeric(data$silo)
#change time column class to numeric; exclude the X with the substr command
data$Time <- as.numeric(substr(data$Time,2,nchar(data$Time)))
#format and export table for metaboanalyst
data$sample <- paste("S",data$silo,"T",data$Time, sep = "")
#move sample columns to first column
data <- data[,c(ncol(data),1:ncol(data)-1)]
data_std <- data[,-grep("CHOYP", colnames(data))]
View(data_std)
write.csv(data_std, "~/Documents/GitHub/OysterSeedProject/analysis/ASCA/ASCA_shellytest/silo3_9_STD_reformat4MetabA.csv", row.names = FALSE, quote = FALSE)
View(normData)
View(rownames(normdData))
View(rownames(normData))
ASCA_normData_F <- as.matrix(substr(rownames(normdData),1,1))
ASCA_normData_F <- as.matrix(substr(rownames(normData),1,1))
View(ASCA_normData_F)
ASCA_normData_F <- as.matrix(substr(rownames(normData),2,1))
View(ASCA_normData_F)
View(substr(rownames(normData),2,1))
View(substr(rownames(normData),1,2))
ASCA_normData_F <- as.matrix(substr(rownames(normData),1,2), substr(rownames(normData),3,length(rownames(normData))))
View(ASCA_normData_F)
ASCA_normData_F <- cbind(as.matrix(substr(rownames(normData),1,2)), as.matrix(substr(rownames(normData),3,length(rownames(normData))))))
ASCA_normData_F <- cbind(as.matrix(substr(rownames(normData),1,2)), as.matrix(substr(rownames(normData),3,length(rownames(normData)))))
View(ASCA_normData_F)
ASCA_normData_F <- cbind(as.matrix(substr(rownames(normData),1,2)), as.matrix(substr(rownames(normData),4,length(rownames(normData)))))
View(ASCA_normData_F)
ASCA_normData_X <- as.matrix(normData)
ASCA <- ASCA.Calculate(ASCA_normData_X, ASCA_normData_F, equation.elements = "1,2,12", scaling = FALSE)
library(MetStaT)
ASCA <- ASCA.Calculate(ASCA_normData_X, ASCA_normData_F, equation.elements = "1,2,12", scaling = FALSE)
str(ASCA_normData_F)
str(ASCA_normData_X)
class(ASCA_normData_X)
ASCA_normData_X <- as.matrix(normData[,1:ncol(normData)])
str(ASCA_normData_X)
ASCA_normData_F <- cbind(as.matrix(substr(rownames(normData),2,2)), as.matrix(substr(rownames(normData),4,length(rownames(normData)))))
View(ASCA_normData_F)
ASCA_normData_F <- cbind(as.matrix(as.numeric(substr(rownames(normData),2,2))), as.matrix(as.numeric(substr(rownames(normData),4,length(rownames(normData))))))
str(ASCA_normData_F)
ASCA <- ASCA.Calculate(ASCA_normData_X, ASCA_normData_F, equation.elements = "1,2,12", scaling = FALSE)
ASCA.PlotLoadings(ASCA, ee = "1", pcs="1,2")
ASCA.PlotLoadings(ASCA, ee = "2", pcs="1,2")
ASCA.PlotLoadings(ASCA, ee = "12", pcs="1,2")
ASCA.PlotScoresPerLevel(ASCA, ee = "1", pcs = "1,2")
ASCA.PlotScoresPerLevel(ASCA, ee = "2", pcs = "1,2")
ASCA.PlotScoresPerLevel(ASCA, ee = "12", pcs = "1,2")
ASCA.DoPermutationTest(ASCA, perm=1000)
ASCA.GetSummary(ASCA)
ASCA.PlotScoresPerLevel(ASCA, ee = "1", pcs = "1,2")
View(ASCA$`1`$svd$v)
View(ASCA$`1`$svd$v$V1)
View(ASCA$`1`$svd$v[,1])
plot(ASCA$`1`$svd$v[,1],ASCA$`1`$svd$v[,2])
View(ASCA$data)
View(ASCA$`1`$svd$v[,1])
protnames <- data.frame(colnames(ASCA$data))
d <- cbind(protnames, ASCA$`1`$svd$v[,1])
View(d)
cutd <- d[which(abs(d$`ASCA$`1`$svd$v[, 1]`) > 0.04),]
cutd <- d[which(abs(d$`ASCA$`1`$svd$v[,1]`) > 0.04),]
colnames(d) <- c("protein", "PC1loadings")
cutd <- d[which(abs(d$PC1loadings) > 0.04),]
d <- cbind(protnames, ASCA$`1`$svd$v[,1])
colnames(d) <- c("protein", "PC1loadings")
cutd <- d[which(abs(d$PC1loadings) >= 0.04),]
View(cutd)
View(data)
View(data[,which(colnames(data) %in% cutd$protein)])
View(data[,c(1:3,which(colnames(data) %in% cutd$protein))])
View(colnames(data))
View(data.frame(colnames(data)))
View(data[,c(1:3,which(data.frame(colnames(data)) %in% cutd$protein))])
View(data[,c(1:3,which(colnames(data) %in% cutd$protein))])
View(data[,c(which(colnames(data) %in% cutd$protein))])
View(colnames(data))
View(cutd$protein)
std(cutd)
str(cutd)
d <- cbind(protnames, ASCA$`1`$svd$v[,1])
colnames(d) <- c("protein", "PC1loadings")
class(d$protein) <- "character"
cutd <- d[which(abs(d$PC1loadings) >= 0.04),]
View(data[,c(1:3,which(colnames(data) %in% cutd$protein))])
View(cutd$protein)
protnames <- data.frame(as.character(colnames(ASCA$data)))
View(protnames)
protnames <- data.frame(as.character(colnames(ASCA$data)))
d <- cbind(protnames, ASCA$`1`$svd$v[,1])
colnames(d) <- c("protein", "PC1loadings")
cutd <- d[which(abs(d$PC1loadings) >= 0.04),]
View(cutd)
View(data[,c(1:3,which(colnames(data) %in% cutd$protein))])
View(data[,c(1:3,which(as.character(colnames(data)) %in% cutd$protein))])
View(as.character(colnames(data)))
as.character(colnames(data))
View(normData)
protnames <- data.frame(colnames(ASCA$data))
d <- cbind(protnames, ASCA$`1`$svd$v[,1])
colnames(d) <- c("protein", "PC1loadings")
cutd <- d[which(abs(d$PC1loadings) >= 0.04),]
View(normData)
View(normData[,which(colnames(normData) %in% cutd$protein))])
View(normData[,which(colnames(normData) %in% cutd$protein)])
ncol(normData[,which(colnames(normData) %in% cutd$protein)])
cutnormD <-normData[,which(colnames(normData) %in% cutd$protein)]
View(cutnormD)
library(heatmap3)
heatmap3(as.matrix(cutnormD))
heatmap3(as.matrix(t(cutnormD)))
View(ASCA_normData_F)
cutnormD$silo <- as.numeric(substr(rownames(cutnormD),2,2))
cutnormD$time <- as.matrix(as.numeric(substr(rownames(cutnormD),4,length(rownames(cutnormD)))))
ncol(cutnormD)
cutnormD <- cutnormD[,c(60,61,1:59)]
View(cutnormD)
heatmap3(as.matrix(t(cutnormD[,3:61])), Colv = NULL)
heatmap3(as.matrix(t(cutnormD[,3:61])), Colv = NULL)
cutnormD
heatmap3(as.matrix(t(cutnormD[,3:61])), Colv = NA)
View(order(cutnormD))
View(cutnormD[order(silo,time),])
View(cutnormD[order(cutnormD$silo,cutnormD$time),])
ord_cutnormD <- cutnormD[order(cutnormD$silo,cutnormD$time),]
heatmap3(as.matrix(t(ord_cutnormD[,3:61])), Colv = NA)
heatmap3(as.matrix(t(ord_cutnormD[-c(1,9),3:61])), Colv = NA)
plot(ord_cutnormD[1:8,3:ncol(ord_cutnormD)])
?plot()
plot(ord_cutnormD[1:8,2],ord_cutnormD[1:8,3:ncol(ord_cutnormD)])
ggplot(data = ord_cutnormD, aes(x=time, y=val)) + geom_line(aes(colour=variable))
View(tidyr::gather(ord_cutnormD, "protein", 3:ncol(ord_cutnormD)))
View(tidyr::gather(ord_cutnormD, "time","abundance", 3:ncol(ord_cutnormD)))
View(tidyr::gather(ord_cutnormD, "protein","abundance", 3:ncol(ord_cutnormD)))
ord_cutnormD_long <- tidyr::gather(ord_cutnormD, "protein","abundance", 3:ncol(ord_cutnormD)
ord_cutnormD_long <- tidyr::gather(ord_cutnormD, "protein","abundance", 3:ncol(ord_cutnormD))
ord_cutnormD_long <- tidyr::gather(ord_cutnormD, "protein","abundance", 3:ncol(ord_cutnormD))
library(ggplot2)
View(ord_cutnormD_long)
ggplot(ord_cutnormD_long, aes(x= time, y = abundance)) + geom_line(aes(colour = protein))
ggplot(ord_cutnormD_long, aes(x= time, y = abundance)) + geom_line(aes(colour = protein)) + facet_wrap(~silo)
ggplot(ord_cutnormD_long, aes(x= time, y = abundance)) + geom_line(aes(colour = silo)) + facet_wrap(~protein, ncol = 10)
class(ord_cutnormD_long$silo)
class(ord_cutnormD_long$silo) <- "character"
ggplot(ord_cutnormD_long, aes(x= time, y = abundance)) + geom_line(aes(colour = silo)) + facet_wrap(~protein, ncol = 10)
